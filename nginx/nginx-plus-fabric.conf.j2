{% macro location(name, healthcheck, healthcheck_uri) -%}
  location /{{ name }}/ {
    proxy_pass https://{{ name }}/;
    proxy_set_header Host {{ name }};

    proxy_ssl_session_reuse     on;
    proxy_ssl_protocols         TLSv1.2;
    proxy_ssl_verify            off;
    proxy_read_timeout          3600;
    proxy_connect_timeout       3600;

    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Accept-Encoding "";

    {% if healthcheck %}
      health_check interval=2s fails=1 uri={{healthcheck_uri or "/"}};
    {% endif %}
  }
{%- endmacro %}

{% if log_to_syslog %}
error_log {{ syslog_error_log_location }};
{% else %}
error_log {{ error_log_location }};
{% endif %}
worker_processes  auto;

events {
  worker_connections  1024;
}

daemon off;

http {

  include mime.types;
  include nginx-gz.conf;
  resolver {{ resolver.host }} valid={{ resolver.ttl }};  #use local DNS and override TTL to whatever value makes sense
  resolver_timeout 2s;
  client_max_body_size 30M;

    {% if log_to_syslog %}
        log_format json '{"service_name": "{{ service_log_name }}",'
             '"time": "$time_iso8601", '
             '"remote_addr": "$remote_addr", '
             '"remote_user": "$remote_user", '
             '"body_bytes_sent": $body_bytes_sent, '
             '"request_time": $request_time, '
             '"status": $status, '
             '"request": "$request", '
             '"request_method": "$request_method", '
             '"http_referrer": "$http_referer", '
             '"http_x_forwarded_for": "$http_x_forwarded_for", '
             '"http_user_agent": "$http_user_agent"}';
    {% else %}
        log_format main {{ service_log_name }} '$remote_addr - $remote_user [$time_local] "$request" '
              '$status $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    {% endif %}

    {% if log_to_syslog %}
        access_log {{ syslog_access_log_location }};
    {% else %}
        access_log {{ access_log_location }};
    {% endif %}

  {% if services %}
    {% for name, service in services.iteritems() %}
    upstream {{ name }} {
    server        {{ service.server }} {{ service.service }} resolve;
    zone backend  64k;
    least_time 		last_byte;
    keepalive 		300;
    }
    {% endfor %}
  {% endif %}

  server {
    listen 80;

    {% if services %}
      {% for name, service in services.iteritems() %}
        {{ location(name, service.healthcheck, service.healthcheck_uri) }}
      {% endfor %}
    {% endif %}

    location / {
      return         301 https://$host$request_uri;
    }
  }

  server {
    listen       443 ssl;

    ssl_certificate      /etc/ssl/nginx/certificate.pem;
    ssl_certificate_key  /etc/ssl/nginx/key.pem;
    include nginx-ssl.conf;

    keepalive_timeout	3600s;
    keepalive_disable	none;
    keepalive_requests  100000;

    server_name {{ name }};
    status_zone {{ name }};

    root {{ root }};

    include default-location.conf;

    {% if services %}
      {% for name, service in services.iteritems() if service.expose_external%}
        {{ location(name, service.healthcheck, service.healthcheck_uri) }}
      {% endfor %}
    {% endif %}

    location = /status.html {
      root /usr/share/nginx/html/;
    }

    location /status {
      status;
    }
  }
}

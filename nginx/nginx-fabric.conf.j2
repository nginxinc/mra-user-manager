{% macro location(name) -%}
  location /{{ name }}/ {
    proxy_pass https://{{ name }}/;
    proxy_set_header Host {{ name }}{% if internal_domain_name != None %}.{{internal_domain_name}}{% endif %};

    proxy_ssl_session_reuse     on;
    proxy_ssl_protocols         TLSv1.2;
    proxy_ssl_verify            off;
    proxy_read_timeout          3600;
    proxy_connect_timeout       3600;

    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_set_header Accept-Encoding "";

  }
{%- endmacro %}

{% if log_to_syslog %}
error_log {{ syslog_error_log_location }};
{% else %}
error_log {{ error_log_location }};
{% endif %}
worker_processes  auto;

events {
  worker_connections  1024;
}

daemon off;

http {

    include mime.types;
    include nginx-gz.conf;
    resolver {{ resolver.host }};  #use local DNS and override TTL to whatever value makes sense

    client_max_body_size 30M;
    client_body_buffer_size 30M;
    default_type application/octet-stream;
    access_log /var/log/nginx/access.log combined;

    {% if log_to_syslog %}
        log_format json '{"service_name": "{{ service_log_name }}",'
             '"time": "$time_iso8601", '
             '"remote_addr": "$remote_addr", '
             '"remote_user": "$remote_user", '
             '"body_bytes_sent": $body_bytes_sent, '
             '"request_time": $request_time, '
             '"status": $status, '
             '"request": "$request", '
             '"request_method": "$request_method", '
             '"http_referrer": "$http_referer", '
             '"http_x_forwarded_for": "$http_x_forwarded_for", '
             '"http_user_agent": "$http_user_agent"}';
    {% else %}
        log_format main {{ service_log_name }} '$remote_addr - $remote_user [$time_local] "$request" '
              '$status $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    {% endif %}

    {% if log_to_syslog %}
        access_log {{ syslog_access_log_location }};
    {% else %}
        access_log {{ access_log_location }};
    {% endif %}

    # use the kernel sendfile
    sendfile        on;
    # prepend http headers before sendfile()
    tcp_nopush      on;
    tcp_nodelay     on;


  {% if services %}
      {% for name, service in services.iteritems() %}
      upstream {{ name }} {
        server          {{ name }}.{{ service.server }}:{{ service.port }};
        zone backend    64k;
        keepalive       300;
      }
      {% endfor %}
  {% endif %}

    server {
        listen 80 default_server;
        server_name {{ name }};
        rewrite_log on;

        keepalive_timeout	3600s;
        keepalive_disable	none;
        keepalive_requests  100000;

        include default-location.conf;


  {% if services %}
    {% for name, service in services.iteritems() %}
      {{ location(name) }}
    {% endfor %}
  {% endif %}

    }
}
